import csv
from Nodo import Nodo
from BusquedasCiegas import *
from BusquedasHeuristicas import *

class Grafo():
    def __init__(self):
        self.nodos = []

    def eliminarNodos(self):
        self.nodos=[]

    def crearGrafo(self,archivo):
        with open(archivo, newline='') as File:
            reader = csv.reader(File)
            for row in reader:
                nodoA=self.getNodoByStr(str(row[0]))
                if nodoA is None:
                    nodoA=self.addNode(str(row[0]))
                nodoB=self.getNodoByStr(str(row[1]))
                if nodoB is None:
                    nodoB=self.addNode(str(row[1]))
                self.addArista(nodoA,nodoB,row[2])
        def addArista(self, nodoA, nodoB, peso):
        nodoA.addArista(nodoB,peso)
    def getNodos(self):
        return self.nodos;
    def getNodoByStr(self, name):
        for i in self.nodos:
            if i.getNombre() == name:
                return i
        else:
            return None;
    def addNode(self, name):
        nodo = Nodo(name)
        self.nodos.append(nodo)
        return nodo
    def __str__(self):
        j=[]
        for i in self.nodos:
            j.append(i.getNombre())
        return j


    def ProfundidadIterativa(self,origen,destinos):
        nodoA = self.getNodoByStr(origen)
        if (destinos == '' and nodoA is not None):
            nodoB=Nodo('asd')
            Busqueda().ProfundidadIterativa(nodoA,[nodoB])
        else:
            vectorDestinos = self.validarDestinos(destinos)
            if (nodoA is not None and len(vectorDestinos) > 0):
                Busqueda().ProfundidadIterativa(nodoA, vectorDestinos)
            else:
                print("Â¡ERROR! Alguno de los datos ingresados no existen en el grafo")


grafo = Grafo()
grafo.crearGrafo('prueba.csv')

grafo.ProfundidadIterativa('H',['J'])




class Nodo():
    def __init__(self, nombre):
        self.nombre=nombre
        self.valor=0
        self.aristas=[]

    def getNombre(self):
        return self.nombre

    def addArista(self,nodoD,peso):
        self.aristas.append(Arista(nodoD,peso))

    def getAristas(self):
        return self.aristas
    def getAristasStr(self):
        j=''
        for i in self.aristas:
            j+=self.nombre+i.__str__()+'\n'
        return  j
    def getValor(self):
        return self.valor
    def setValor (self, valor):
        self.valor=valor

    #Para metodo Profundidad Iterativa
    def setNivel(self, nivel):
        self.nivel = nivel
    def getNivel(self):
        return self.nivel
    def getAristasSN(self, nodoQuitar):
        aux = []
        for i in self.aristas:
            if (i.getNodoDest != nodoQuitar):
                aux.append(i)
        return aux

    def conectaA(self,nodoB):
        for i in self.aristas:
            if(i.getNodoDest()==nodoB):
                return True
        return False


class Arista():
    def __init__(self, nodoDest,peso):
        self.nodoDest=nodoDest
        self.peso=peso

    def getPeso(self):
        return self.peso

    def getNodoDest(self):
        return self.nodoDest
    def __str__(self):
        return '---('+ str(self.peso)+')-->'+self.nodoDest.getNombre()


from collections import deque
from operator import itemgetter

import time

class Busqueda():
        def ProfundidadIterativa(self,origen,destinos):
        tic = time.perf_counter()
        # Inicializar variables
        origen.setNivel(0)
        cola = deque()
        visitados = []
        extrae = None
        cola.append(origen)
        nivel = 0
        aux = 0
        terminar = 0

        print('\n****************************************************')
        print('          BUSQUEDA POR PROFUNDIDAD ITERATIVA       ')
        print('****************************************************')

        while(terminar == 0 and extrae not in destinos ):
            terminar=1
            print("----------Nivel "+str(nivel)+"--------")
            visitados=[]
            aux=0
            while (extrae not in destinos):
                if(nivel==0):
                    terminar=0
                if(len(cola)>0):
                    extrae=cola.popleft()
                else:
                    print('\nBusqueda terminada, NO se han encontrado caminos para el nodo destino')
                    cola.append(origen)
                    break
                if (extrae not in visitados):
                    visitados.append(extrae)
                    nodosRel=deque()
                    if(extrae.getNivel()<nivel):
                        for i in extrae.getAristas():
                            if(extrae.getNivel()==nivel-1 and len(i.getNodoDest().getAristasSN(extrae))>0):
                                terminar=0

                            if(i.getNodoDest() not in visitados):
                                i.getNodoDest().setNivel(extrae.getNivel()+1)
                                nodosRel.append(i.getNodoDest())
                        cola=nodosRel+cola

                    print('---------------------\nIteracion:' + str(aux + 1))
                    print('Extrae:' + extrae.getNombre())
                    print('Cola:' + ' '.join(x.getNombre() for x in cola))
                    aux = aux + 1
            nivel += 1
        toc = time.perf_counter()
        print(f"\nTiempo transcurrido {toc - tic:0.8f} segundos")